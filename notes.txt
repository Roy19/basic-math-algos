Sources :
 ----->https://www.geeksforgeeks.org/modulo-1097-1000000007/
 ----->https://www.hackerearth.com/practice/math/number-theory/basic-number-theory-1/tutorial/
----------------------
----------------------
Topics covered are:
----------------------
----------------------
	1> Modular Arithmetic
	2> Modular Expansion
	3> Greatest Common Divisor(GCD)
	4> Extended Euclidean Algorithm
	5> Modular Multiplicative Inverse

========================
1> Modular Arithmetic
========================
When one number divides another, the modulo operation finds the 
remainder. It is denoted by the % symbol. Ex: 5%2 = 1.
------------
Properties:
------------
	1> (a+b)%c = (a%c+b%c)%c
	2> (a*b)%c = ((a%c)*(b%c))%c
	3> (a-b)%c = ((a%c)-(b%c)+c)%c
	4> (a/b)%c = ((a%c)/(b%c))%c
	
Most programming competitions would have you do modulo 10^9+7 which 
is prime to address the common problem of integer overflow.

==========================
2> Modular Expansion
==========================
Common way to do it would be:
	expansion(num,pow){
		while(num > 0)
		{	result = result*num;
			num -= 1;
		}
	}
In that case time complexity is O(n). But for large inputs like n = 10^18
this just dosen't work.

So use instead an algorithm of time complexity O(log n).

	num^pow = { num,                     if pow = 1     }
			  { num^(pow/2)^2, 		     if pow is even }
			  { num*(num^((pow-1)/2)^2), if pow is odd  }

============================
3> GCD
============================
Normal Euclidean Algorithm says the GCD(a,b) = GCD(b,b % a) = .... until 
b % a == 0.

Can be implemented both using recursive and iterative methods. Time complexity 
is the same, i.e ,O(log(max(a,b))) however space complexity does not hold true 
for the same, i.e, in case of iterative method it's O(1) while in case of recursive 
method it's O(log(max(a,b)).

=================================
4> Extended Euclidean Algorithm
=================================
What this algorithm does is it use the concept of Ax+By = GCD(A,B), where x and y are 
integers. How is it done is shown below.

We know that GCD(A,B) = GCD(B,B%A) = Bx+(A%B)y = Ax+By		-(1)
But A%B = A - B*floor(A/B).
So Bx1 + (A-floor(A/B)*B)y1 = GCD(B,A%B)
Substituting it a bit more:
B(x1 - floor(A/B)y1) + Ay1 = GCD(B,A%B)						-(3)
Comparing co-efficients in (1) and (3):
x = y1
y = x1 - floor(A/B)y1

Time complexity both are O(log(max(A,B))).

==================================
5> Modular Multiplicative Inverse
==================================
We want to find a number B such that (A.B)%M = 1. So from the concept of modular arithmetic,
this implies that:

A.B = 1 (mod M) 

Which gives us that B should be in the range [1,M-1]. Why? 
Since (A.B)%M = (A%M . B%M)%M.
Now since B%M is in the range [0,M-1], we have B is in the range [0,M-1]. But 0 is invalid, so B is
in the range [1,M-1]

Time complexity O(M)

Existence of Modular Multiplicative Inverse: The Modular Multiplicative Inverse can only exists
									if A and M are co-prime numbers ,i.e, GCD(A,M) = 1



